import tkinter as tk
from tkinter import messagebox
import math

# Function to check if a player has won
def is_winner(board, player):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Horizontal
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Vertical
        [0, 4, 8], [2, 4, 6]              # Diagonal
    ]
    return any(all(board[cell] == player for cell in combo) for combo in winning_combinations)

# Function to check for a tie
def is_tie(board):
    return ' ' not in board

# Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, is_ai_turn, alpha, beta):
    if is_winner(board, 'O'):
        return 1
    if is_winner(board, 'X'):
        return -1
    if is_tie(board):
        return 0

    if is_ai_turn:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, depth + 1, False, alpha, beta)
                board[i] = ' '
                best_score = max(best_score, score)
                alpha = max(alpha, score)
                if beta <= alpha:
                    break
        return best_score
    else:
        worst_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, depth + 1, True, alpha, beta)
                board[i] = ' '
                worst_score = min(worst_score, score)
                beta = min(beta, score)
                if beta <= alpha:
                    break
        return worst_score

# AI move
def ai_move():
    best_value = -math.inf
    best_move = None
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            current_score = minimax(board, 0, False, -math.inf, math.inf)
            board[i] = ' '
            if current_score > best_value:
                best_value = current_score
                best_move = i
    board[best_move] = 'O'
    buttons[best_move].config(text='O', state='disabled')
    check_game_state()

# Human move (when a button is clicked)
def player_move(index):
    if board[index] == ' ':
        board[index] = 'X'
        buttons[index].config(text='X', state='disabled')
        check_game_state()
        if not game_over:
            ai_move()

# Check if the game has ended
def check_game_state():
    global game_over
    if is_winner(board, 'X'):
        messagebox.showinfo("Tic-Tac-Toe", "Congratulations! You win!")
        game_over = True
    elif is_winner(board, 'O'):
        messagebox.showinfo("Tic-Tac-Toe", "AI wins! Better luck next time!")
        game_over = True
    elif is_tie(board):
        messagebox.showinfo("Tic-Tac-Toe", "It's a draw!")
        game_over = True
    if game_over:
        reset_board()

# Reset the board for a new game
def reset_board():
    global board, game_over
    board = [' ' for _ in range(9)]
    game_over = False
    for button in buttons:
        button.config(text='', state='normal')

# Initialize the tkinter window
window = tk.Tk()
window.title("Tic-Tac-Toe")

buttons = []
board = [' ' for _ in range(9)]
game_over = False

# Create the buttons for the 3x3 grid
for i in range(9):
    button = tk.Button(window, text='', font=('normal', 40), width=5, height=2,
                       command=lambda i=i: player_move(i))
    button.grid(row=i//3, column=i%3)
    buttons.append(button)

# Start the main GUI loop
window.mainloop()
